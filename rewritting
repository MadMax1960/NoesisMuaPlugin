from inc_noesis import *
import noesis
import rapi

#debug setting
debug = 1

def registerNoesisTypes():
    handle = noesis.register("BLAZEBLUE", ".MUA")
    noesis.setHandlerTypeCheck(handle, MUApyCheckType)
    noesis.setHandlerLoadModel(handle, MUALoadModel)
    #noesis.setHandlerWriteModel(handle, noepyWriteModel)
    #any noesis.NMSHAREDFL_* flags can be applied here, to affect the model which is handed off to the exporter.
    #adding noesis.NMSHAREDFL_FLATWEIGHTS_FORCE4 would force us to 4 weights per vert.
    if debug:
        noesis.logPopup()
        #print("The log can be useful for catching debug prints from preview loads.\nBut don't leave it on when you release your script, or it will probably annoy people.")
        
    return 1

NOEPY_HEADER = "MUA"

export_option = 0 
'''
0 defult export
1 Import animetion
'''
	  
#check if it's this type based on the data
def MUApyCheckType(data):
    if len(data) < 3:
        return 0
    bs = NoeBitStream(data)

    if bs.readBytes(3).decode("ASCII") != NOEPY_HEADER:
        return 0

    return 1

def readAddress(bs):
    addr = []
    Num = []
	
    bs.seek(0x20, NOESEEK_ABS)
    for i in range(0,17):
        addr.append(bs.readInt())
        Num.append(bs.readInt())
    
    '''
    [0]#Skeleton
    [1]#bone
    [2]#model
    [3]#vertex group (for Material slot)
    [4]#material
    [5]#texture assign
    [6]#texture name Index
    [7]#texture uv animation
    [8]#animetion key frame list
    [9]#animation key frame Value
    [10]#color blend animation
    [11]evb file name index
    [12]#meshes and vertex Index table
    [13]#vertex
    [14]#face
    [15]#strng info,start from and length
    [16]#string Name
    [17]evb data

    NOT ALL DATA TYPE SUPPORT TO EXPORT IN NOESIS
    '''
    
    return addr,Num
    
def getnames(bs,Num,addr):
    Name = []
    stringlength = []
    stringoffset = []
    SIAddress = addr[15]
    SAddress = addr[16]

    for i in range(0, Num[15]):
        bs.seek(SIAddress, NOESEEK_ABS)
        stringoffset.append(bs.readUInt())
        bs.seek(SIAddress + 0x4, NOESEEK_ABS)
        stringlength.append(bs.readUInt())
        bs.seek(SAddress + stringoffset[i] , NOESEEK_ABS)
        namedata = bs.readBytes(stringlength[i])
        name = namedata.decode('shift_jis', errors='replace')
        Name.append(name)
        SIAddress += 0x10

    return Name

def getbones(bs,Num,addr,Name):
    skeletons = []
    SKoffset = []
    SKboneNum = []
    AnimSkelIndex = []#animated skeleton list
    KFVIndex = []#key frame value Index
    SKAddress = addr[0]
    BAddress = addr[1]

    for sk in range(0, Num[0]):
        bs.seek(SKAddress)
        SKoffset.append(bs.readUInt())
        SKboneNum.append(bs.readUInt())
        SKAddress += 0x20
        bones = []
        for b in range(0, SKboneNum[sk]):
            bs.seek(BAddress, NOESEEK_ABS)
            boneNameIndex = bs.readUInt()
            boneType = bs.readUInt()
            Tran = NoeVec3.fromBytes(bs.readBytes(12))
            Rot = NoeAngles.toDegrees((NoeVec3.fromBytes(bs.readBytes(12))))
            Scal = NoeVec3.fromBytes(bs.readBytes(12))
            bs.seek(BAddress + 0x3C , NOESEEK_ABS)
            bonePIndex = bs.readInt()
            bs.seek(BAddress + 0x48 , NOESEEK_ABS)
            Mat44 = NoeMat44.fromBytes(bs.readBytes(0x40), NOE_LITTLEENDIAN )
            boneMat = Mat44.toMat43()
            bs.seek(BAddress + 0x108 , NOESEEK_ABS)
            KFNum = bs.readUInt()#defult animation key frame
            if KFNum:#four type animation value Index
                KFVIndex.append(bs.readUInt())
                KFVIndex.append(bs.readUInt())
                KFVIndex.append(bs.readUInt())
                KFVIndex.append(bs.readUInt())
                if sk not in AnimSkelIndex:
                    AnimSkelIndex.append(sk) 
            BAddress += 0x130
            bones.append(NoeBone(b,str(Name[boneNameIndex]), boneMat, None , bonePIndex))       
        for b in range(0, SKboneNum[sk]):
                p = bones[b].parentIndex
                if p != -1:
                    bones[b].setMatrix(bones[b].getMatrix() * bones[p].getMatrix() )
        skeletons.append(bones)

    return skeletons,AnimSkelIndex

def getmaterials(bs,Num,addr,Name):
    MTIndex = []#Material texture index
    TNAIndex = []#Texture Name Assign Index
    TNIndex = []#Texture Name Index
    Mat = []
    TNAddress = addr[6]
    TAAddress = addr[5]
    MTAddress = addr[4]

    for i in range(0, Num[6]):#Texture Name
        bs.seek(TNAddress, NOESEEK_ABS)
        TNIndex.append(bs.readInt())
        TNAddress += 0x10
    
    for i in range(0, Num[5]):#Texture Assign
        bs.seek(TAAddress,NOESEEK_ABS)
        MTIndex.append(bs.readInt())
        TNAIndex.append(bs.readInt())
        TAAddress += 0x20
        
    for i in range(0 ,Num[4]):#Material
        bs.seek(MTAddress,NOESEEK_ABS)
        MTANum = bs.readInt()
        MTAOffset = bs.readInt()
        Mat.append(NoeMaterial(i,Name[TNIndex[TNAIndex[MTAOffset]]]))
        if MTANum == 2:
            Mat[i].setOcclTexture(Name[TNIndex[TNAIndex[MTAOffset+1]]])
        if MTANum > 3:
            print('undiscovered texturetype')
        MTAddress += 0x50

    return Mat

def getmesh(bs,Num,addr):
    ModelSkeletonIndex = []#Mesh Skeleton Index
    MGNum =[]#mesh vertex group Num
    MGoffeet =[]
    MVNum = []#mesh vertext Num
    MVoffset = []
    MNIndex = []#Mesh Name Index
    MSRIndex = []#Mesh Scence Root Skeleton Index
    GMIndex = []#group Material Index
    GFNum = []#group face triangle list Num
    GFoffset = []
    GEvb = []#group evb value Num
    GEoffset = []
    MAddress = addr[2]
    GAddress = addr[3]

    for i in range(0, Num[2]):
        bs.seek(MAddress, NOESEEK_ABS)
        ModelSkeletonIndex.append(int(bs.readFloat()))
        bs.seek(MAddress + 0x8, NOESEEK_ABS)
        MGNum.append(bs.readInt())
        MGoffeet.append(bs.readInt())
        MVNum.append(bs.readInt())
        MVoffset.append(bs.readInt())
        bs.seek(MAddress + 0xB4, NOESEEK_ABS)
        MNIndex.append(bs.readInt())
        MSRIndex.append(bs.readInt())
        MAddress += 0xc0
        for j in range(0, MGNum[i]):
            bs.seek(GAddress, NOESEEK_ABS)
            GMIndex.append(bs.readInt())
            GFNum.append(bs.readInt())
            GFoffset.append(bs.readInt())
            GEoffset.append(bs.readInt())
            GEvb.append(bs.readInt())
            GAddress += 0x20

    return MGNum,MVNum,MVoffset,GFNum,GFoffset,GMIndex,MNIndex,ModelSkeletonIndex

def getanim(bs,addr,skeletons,AnimSkelIndex):
    anims = []
    kfBones = []
    translationKeys = []
    rotationKeys = []
    shearKeys = []
    scaleKeys = []
    ALAddress = addr[8] 
    AAddress = addr[9]
    for i in range(0,len(AnimSkelIndex)):
        for j in range(0,len(skeletons[AnimSkelIndex[i]])):
            bs.seek(ALAddress + 0x4, NOESEEK_ABS)
            tranframes = bs.readUInt()
            bs.seek(ALAddress + 0x14, NOESEEK_ABS)
            rotframes = bs.readUInt()
            bs.seek(ALAddress + 0x24, NOESEEK_ABS)
            shrframes = bs.readUInt()
            bs.seek(ALAddress + 0x34, NOESEEK_ABS)
            scalframes = bs.readUInt()
            for k in range(0,tranframes):
                bs.seek(AAddress, NOESEEK_ABS)
                tran = NoeVec3.fromBytes(bs.readBytes(12))
                bs.seek(AAddress + 0x10, NOESEEK_ABS)
                time = bs.readUInt()
                translationKeys.append(NoeKeyFramedValue(time,tran))
                AAddress += 0x20
            for l in range(0,rotframes):
                bs.seek(AAddress, NOESEEK_ABS)
                rot = NoeAngles.fromBytes(bs.readBytes(12))
                rot = rot.toDegrees()
                bs.seek(AAddress + 0x10, NOESEEK_ABS)
                time = bs.readUInt()
                rotationKeys.append(NoeKeyFramedValue(time,rot))
                AAddress += 0x20
            for m in range(0,shrframes):
                bs.seek(AAddress, NOESEEK_ABS)
                shr = NoeQuat.fromBytes(bs.readBytes(16))
                bs.seek(AAddress + 0x10, NOESEEK_ABS)
                time = bs.readUInt()
                shearKeys.append(NoeKeyFramedValue(time,shr))
                AAddress += 0x20
            for n in range(0,scalframes):
                bs.seek(AAddress, NOESEEK_ABS)
                scal = NoeVec3.fromBytes(bs.readBytes(12))
                bs.seek(AAddress + 0x10, NOESEEK_ABS)
                time = bs.readUInt()
                scaleKeys.append(NoeKeyFramedValue(time,scal))
                AAddress += 0x20
            kfBones.append(NoeKeyFramedBone(j))
            kfBones[j].setRotation(rotationKeys,noesis.NOEKF_ROTATION_EULER_XYZ_3,noesis.NOEKF_INTERPOLATE_LINEAR)
            kfBones[j].setTranslation(translationKeys,noesis.NOEKF_TRANSLATION_VECTOR_3,noesis.NOEKF_INTERPOLATE_LINEAR)
            kfBones[j].setScale(scaleKeys,noesis.NOEKF_SCALE_VECTOR_3,noesis.NOEKF_INTERPOLATE_LINEAR)
            translationKeys = []
            rotationKeys = []
            shearKeys = []
            scaleKeys = []
            ALAddress += 0x40
        anims.append(NoeKeyFramedAnim("DefultPose", skeletons[AnimSkelIndex[i]], kfBones, frameRate = 1, flags = 0))
        kfBones = []

    return anims

def Importanim():
    pass
    '''
    #Import animetion
    ab = NoeBitStream(rapi.loadPairedFileOptional("model motion",".mmot"))
    if ab.data != None:
        addr2 = []
        Num2 = []

        for bc in range(0,10):
            ab.seek(0x20+bc*0x10, NOESEEK_ABS)
            addr2.append(ab.readInt())
            ab.seek(0x24+bc*0x10, NOESEEK_ABS)
            Num2.append(ab.readInt())
    
        ABNum = Num2[1]
        ALAddress = addr2[2]#animetion key frame list
        AAddress = addr2[3]#animation key frame Value
        LMAddress = addr2[4]#linked mesh
        LMNum = Num2[4]
        SIAddress2 = addr2[8]#string info
        SINum2 = Num2[8]
        SAddress2 = addr2[9]#string
	
        stringlength2 = []
        stringoffset2 = []
        Name2 = []
        anims = []
    
        #Name(string)
        for i in range(0, SINum2):
                ab.seek(SIAddress2, NOESEEK_ABS)
                stringoffset2.append(ab.readUInt())
                ab.seek(SIAddress2 + 0x4, NOESEEK_ABS)
                stringlength2.append(ab.readUInt())
                SIAddress2 += 0x10
    
        for s in range(0, SINum2):
                ab.seek(SAddress2 + stringoffset2[s] , NOESEEK_ABS)
                Name2.append(ab.readBytes(stringlength2[s]))
            
        #bone
        bones = []
        for b in range(0, ABNum):
                bs.seek(BAddress, NOESEEK_ABS)
                Mat44 = NoeMat44.fromBytes(bs.readBytes(0x40), NOE_LITTLEENDIAN )
                boneMat = Mat44.toMat43()
                bones.append( NoeBone(b,str(b), boneMat, None , -1) )
                BAddress += 0xE0
    

        #animation
        translationKeys = []
        rotationKeys = []
        shearKeys = []
        scaleKeys = []
        kfBones = []
        for i in range(0,ABNum):
                ab.seek(ALAddress + 0x4, NOESEEK_ABS)
                tranframes = ab.readInt()
                ab.seek(ALAddress + 0x14, NOESEEK_ABS)
                rotframes = ab.readInt()
                ab.seek(ALAddress + 0x24, NOESEEK_ABS)
                shrframes = ab.readInt()
                ab.seek(ALAddress + 0x34, NOESEEK_ABS)
                scalframes = ab.readInt()
                for j in range(0,tranframes):
                    ab.seek(AAddress, NOESEEK_ABS)
                    tran = NoeVec3.fromBytes(ab.readBytes(12))
                    ab.seek(AAddress + 0x10, NOESEEK_ABS)
                    time = ab.readUInt()
                    translationKeys.append(NoeKeyFramedValue(time,tran))
                    AAddress += 0x20
                for k in range(0,rotframes):
                    ab.seek(AAddress, NOESEEK_ABS)
                    rot = NoeAngles.fromBytes(ab.readBytes(12))
                    rot = rot.toDegrees()
                    ab.seek(AAddress + 0x10, NOESEEK_ABS)
                    time = ab.readUInt()
                    rotationKeys.append(NoeKeyFramedValue(time,rot))
                    AAddress += 0x20
                for l in range(0,shrframes):
                    ab.seek(AAddress, NOESEEK_ABS)
                    shr = NoeQuat.fromBytes(ab.readBytes(16))
                    ab.seek(AAddress + 0x10, NOESEEK_ABS)
                    time = ab.readUInt()
                    shearKeys.append(NoeKeyFramedValue(time,shr))
                    AAddress += 0x20
                for m in range(0,scalframes):
                    ab.seek(AAddress, NOESEEK_ABS)
                    scal = NoeVec3.fromBytes(ab.readBytes(12))
                    ab.seek(AAddress + 0x10, NOESEEK_ABS)
                    time = ab.readUInt()
                    scaleKeys.append(NoeKeyFramedValue(time,scal))
                    AAddress += 0x20
                kfBones.append(NoeKeyFramedBone(i))
                kfBones[i].setRotation(rotationKeys,noesis.NOEKF_ROTATION_EULER_XYZ_3,noesis.NOEKF_INTERPOLATE_LINEAR)
                kfBones[i].setTranslation(translationKeys,noesis.NOEKF_TRANSLATION_VECTOR_3,noesis.NOEKF_INTERPOLATE_LINEAR)
                kfBones[i].setScale(scaleKeys,noesis.NOEKF_SCALE_VECTOR_3,noesis.NOEKF_INTERPOLATE_LINEAR)
                translationKeys = []
                rotationKeys = []
                shearKeys = []
                scaleKeys = []
                ALAddress += 0x40
        anims.append(NoeKeyFramedAnim(str(Name2[0]), bones, kfBones, frameRate = 1, flags = 0))
        #assign mesh
        for i in range(0,LMNum):
            ab.seek(LMAddress + 0x4, NOESEEK_ABS)
            LMNIndex = ab.readUInt()
            LMAddress += 0x20
            for j in range(0,MNum):
                if str(Name2[LMNIndex]) == str(mdlList[j].meshes[0].name):
                    mdlList[j].setAnims(anims)

    '''

def ConsturctModel(bs,mdlList,Num,addr,MGNum,MVNum,MVoffset,MNIndex,ModelSkeletonIndex,GFNum,GFoffset,GMIndex,AnimSkelIndex,Name,skeletons,Mat,anims):
    VAddress = addr[13]
    FAddress = addr[14]
    meshes = []
    GIndex = 0
    for i in range(0, Num[2]):
        bs.seek(VAddress + MVoffset[i] * 0x50, NOESEEK_ABS)
        VBuffer = bs.readBytes(MVNum[i] * 0x50)
        rapi.rpgBindPositionBufferOfs(VBuffer, noesis.RPGEODATA_FLOAT, 80, 0)
        rapi.rpgBindNormalBufferOfs(VBuffer,noesis.RPGEODATA_INT, 80, 12)
        rapi.rpgBindTangentBufferOfs(VBuffer,noesis.RPGEODATA_INT, 80, 24)
        rapi.rpgBindUV1BufferOfs(VBuffer, noesis.RPGEODATA_FLOAT, 80, 36)
        rapi.rpgBindColorBufferOfs(VBuffer, noesis.RPGEODATA_UBYTE, 80, 52,4)
        rapi.rpgBindBoneIndexBufferOfs(VBuffer, noesis.RPGEODATA_FLOAT, 80, 56,3)
        rapi.rpgBindBoneWeightBufferOfs(VBuffer, noesis.RPGEODATA_FLOAT, 80, 68,3)
        for j in range(0, MGNum[i]):
            VertexCount=rapi.rpgGetVertexCount()
            print(VertexCount)
            bs.seek(FAddress + GFoffset[GIndex] * 0x2 , NOESEEK_ABS)
            FBuffer = bs.readBytes(GFNum[GIndex] * 0x2)
            rapi.rpgCommitTriangles(FBuffer, noesis.RPGEODATA_USHORT, GFNum[GIndex], noesis.RPGEO_TRIANGLE_STRIP_FLIPPED, 1)
            mesh = rapi.rpgConstructModel()
            meshes.append(mesh.meshes[0])
            meshes[j].setMaterial(str(Mat[GMIndex[GIndex]].name))
            GIndex += 1
        rapi.rpgReset()

        mdl = NoeModel()
        mdl.setMeshes(meshes)
        mdl.setBones(skeletons[int(ModelSkeletonIndex[i])])
        for k in range(0, len(AnimSkelIndex)):
            if ModelSkeletonIndex[i] == AnimSkelIndex[k]:
                mdl.setAnims(anims)
        mdlList.append(mdl) 
        meshes = []
    
    rapi.rpgClearBufferBinds()

def MUALoadModel(data, mdlList):
    #no need to explicitly free the context (created contexts are auto-freed after the handler), but DO NOT hold any references to it outside of this method
    ctx = rapi.rpgCreateContext()

    #mua data
    bs = NoeBitStream(data)

    #read data
    addr,Num = readAddress(bs)#done
    Name = getnames(bs,Num,addr)#done
    Mat = getmaterials(bs,Num,addr,Name)#done
    skeletons,AnimSkelIndex = getbones(bs,Num,addr,Name)#done
    MGNum,MVNum,MVoffset,GFNum,GFoffset,GMIndex,MNIndex,ModelSkeletonIndex = getmesh(bs,Num,addr)#done
    anims = getanim(bs,addr,skeletons,AnimSkelIndex)#done
    ConsturctModel(bs,mdlList,Num,addr,MGNum,MVNum,MVoffset,MNIndex,ModelSkeletonIndex,GFNum,GFoffset,GMIndex,AnimSkelIndex,Name,skeletons,Mat,anims)
    
    rapi.setPreviewOption("drawAllModels","1")
    rapi.setPreviewOption("setAngOfs", "0 90 90")
    
    rapi.rpgClearBufferBinds()
    return 1

'''
def noepyWriteModel(mdl, writer):
    writer = NoeBitStream()
    
    open("somefile.MUA", "wb+").write(writer.getBuffer())
    writer.writeBytes(headerdata)
    
    return 1
'''
